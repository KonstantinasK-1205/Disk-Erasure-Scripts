#!/bin/bash
# Script written by Konstantinas Kau≈°as
# Main script purpose is to sort and manage certificates:
#		1) Find and remove certificate duplicates ( if someone saved same certificates more than once )
#		2) Fixing Drive erasure .pdf filenames, correcting disk capacity size and removing unneccessary text
#		3) Sort all certificates by disk FFactor (2.5", 3.5") which was gathered from Disk Output Log
#		4) Sort all FFactor drives by Manufacturer, Capacity and its sanitizing status

export LC_ALL='C'

# Declate global array < PDF Name Pattern > = Directory Name
mafArray=("wdc@WDC")
mafArray+=("hgst@HGST")
mafArray+=("hitachi@HGST")
mafArray+=("toshiba@Toshiba")
mafArray+=("samsung@Samsung")
mafArray+=("fujitsu@Fujitsu")
mafArray+=("sandisk@SanDisk")
mafArray+=("liteon@LiteOn")
mafArray+=("micron@Micron")
mafArray+=("team@TeamGroup")
mafArray+=("corsair@Corsair")
mafArray+=("crucial@Crucial")
mafArray+=("pliant@Pliant")
mafArray+=("ocz@OCZ")
mafArray+=("adata@ADATA")
mafArray+=("intel@Intel")
mafArray+=("mz@Samsung")
mafArray+=("mtfd@Samsung")
mafArray+=("7mm@Samsung")
mafArray+=("hynix@SKHynx")
mafArray+=("hfs@SKHynx")
mafArray+=("st@Seagate")
mafArray+=("gb@Seagate")
mafArray+=("hp@HP")
mafArray+=("mb@HP")
mafArray+=("wd@WD")

# Declare global array < Program size > = < GB > Capacity
declare -A sizeConv
sizeConv["14 9 GB"]="16 GB"
sizeConv["18 6 GB"]="16 GB"
sizeConv["22 4 GB"]="24 GB"
sizeConv["28 8 GB"]="32 GB"
sizeConv["29 8 GB"]="32 GB"
sizeConv["37 3 GB"]="40 GB"
sizeConv["46 6 GB"]="50 GB"
sizeConv["59 6 GB"]="64 GB"
sizeConv["74 5 GB"]="80 GB"
sizeConv["93 2 GB"]="100 GB"
sizeConv["112 GB"]="120 GB"
sizeConv["119 GB"]="120 GB"
sizeConv["149 GB"]="160 GB"
sizeConv["168 GB"]="180 GB"
sizeConv["179 GB"]="180 GB"
sizeConv["186 GB"]="180 GB"
sizeConv["224 GB"]="250 GB"
sizeConv["233 GB"]="250 GB"
sizeConv["234 GB"]="250 GB"
sizeConv["236 GB"]="250 GB"
sizeConv["238 GB"]="250 GB"
sizeConv["279 GB"]="320 GB"
sizeConv["298 GB"]="320 GB"
sizeConv["335 GB"]="320 GB"
sizeConv["373 GB"]="320 GB"
sizeConv["447 GB"]="500 GB"
sizeConv["466 GB"]="500 GB"
sizeConv["477 GB"]="500 GB"
sizeConv["481 GB"]="500 GB"
sizeConv["559 GB"]="640 GB"
sizeConv["596 GB"]="640 GB"
sizeConv["699 GB"]="750 GB"
sizeConv["894 GB"]="1000 GB"
sizeConv["932 GB"]="1000 GB"
sizeConv["1 36 TB"]="1500 GB"
sizeConv["1 82 TB"]="2000 GB"
sizeConv["2 73 TB"]="3000 GB"
sizeConv["3 64 TB"]="4000 GB"

DuplicateChecker(){
	declare -A fileList
	IFS=$'\n'
	for file in *.pdf; do
		serial="${file##*?\(S-N }"
		serial="${serial%%\)*?}"
		if [[ -n "$serial" ]]; then
			# If current serial is in array
			if [[ -v "fileList[$serial]" ]]; then
				# Extract last 23 char, so we get only date (2020-03-06 08-34-41.pdf)
				curntFileDate="${file: -23}"
				arrayFileDate="${fileList[$serial]: -23}"
				# Remove last 4 char (.pdf)
				curntFileDate="${curntFileDate::-4}"
				arrayFileDate="${arrayFileDate::-4}"
				# Remove all '-' chars
				curntFileDate="${curntFileDate//-/}"
				arrayFileDate="${arrayFileDate//-/}"
				# Remove all ' ' spaces
				curntFileDate="${curntFileDate/ /}"
				arrayFileDate="${arrayFileDate/ /}"

				# E.g.: 20200306083441 > 20200306083441
				if [[ $curntFileDate -gt $arrayFileDate ]]; then
					rm "${fileList[$serial]}" &
				else
					rm "$file" &
					continue
				fi
			fi
			fileList["$serial"]="$file"
		fi
	done
	wait
}

Mover(){
	pattern=$1
	destination=$2
	# If pattern exist, then move to destination
	if [[ $(find . -maxdepth 1 -type f -name "*${pattern}*.pdf" -print -quit) ]]; then
		# Check if destination exist
		if [ ! -d "$destination" ]; then
			mkdir -p "$destination"
		fi
		mv *${pattern}*.pdf "$destination"/
	fi
}

MafChecker(){
	file="$1"
	pattern="$2"
	destination="$3"
	
	lcaseFile="${file,,}"
	# If pattern exist, then move to destination
	if [ -z "${lcaseFile##*${pattern}*}" ]; then
		# Check if destination exist
		if [ ! -d "$destination" ]; then
			mkdir -p "$destination"
		fi
		mv "${file}" "$destination"/
		return 0
	fi
	return 1
}

FactorSorter(){
	# Main sorter based on log file
	for certificate in *.pdf; do
		serial=${certificate##*?\(S-N }
		serial=${serial%%\)*?}
		if [[ -n "$serial" ]]; then
			ffactor=$(echo "$diskLists" | grep -Fm 1 ${serial} || echo "Unknown")
			ffactor=${ffactor//*@/}
			if [[ ! -d "$ffactor" ]]; then
				mkdir -p "$ffactor"
			fi
			mv "$certificate" "$ffactor" 2>/dev/null
		fi
	done
}

SizeSorter(){
	# Get all disk drives and through loop, rename all
	# non standart capacities to standart
	diskSizes=$(ls | grep -oP "(?<= -) .*.B" | sort -u)
	for orgSize in $diskSizes; do
		remSize="${orgSize:1}"
		if [[ -v "sizeConv[${remSize}]" ]]; then
			rename "$remSize" "${sizeConv[$remSize]}" *.pdf
			diskSizes="${diskSizes[@]/${orgSize}/ ${sizeConv[$remSize]}}"
		fi
	done

	# Sort and get only unique values
	diskSizes=$(echo "$diskSizes" | sort -u)
	# Sort all drives by drive capacity
	for size in $diskSizes; do
		foSize="${size:1}"

		Mover "${size}" "${foSize}"
		StateMafSorter
	done
}

StateMafSorter(){
	mkdir -p Blogi
	cd "${foSize}" > /dev/null
	for certificates in *.pdf; do
		if [[ $(pdftotext "$certificates" - | grep -F "FAILED") ]]; then
			mv "$file" Blogi/
		else
			for index in "${mafArray[@]}"; do
				pattern="${index%%@*}"
				destination="${index##*@}"

				MafChecker "${certificates}" "${pattern}" "${destination}"
				if [[ $? -eq 0 ]]; then
					break
				fi
			done
		fi
	done
	cd .. > /dev/null
}

# Load disk drives log, and extract only Serial and FFactor
diskLists=$(logparser -tf "Succeed"* -c Serial FFactor)

DuplicateChecker

IFS=$'\n'
FactorSorter
for FactorSize in */; do
(
	cd "$FactorSize" > /dev/null
	SizeSorter
	cd .. > /dev/null
) &
done
wait
find . -type d -empty -delete
